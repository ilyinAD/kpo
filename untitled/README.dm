VetClinic - реализует интерфейс и соответсвенно ZooService использует Clinic - интерфейс, то есть ZooService не зависит от конкретной реализации,
насколько я понял это принцип DIP.

Herbivore и Predator - наследуются от Animal, так как ничего кроме геттеров и сеттеров тут нет то соблюдается принцип лисков

ZooController принимает ZooService в констркуторе, то есть сервис не зависит от того как мы взаимодействуем с пользователем
(в данном случае через консоль). То есть соблюдается признак инверсии зависимостей и чистой архитектуры.

В зоопарке хранится список из Animal, что является абстрактным классом, то есть мы можем добавлять туда сразу всех
животным и не зависим от конкретной реализации. В любой момент можем добавить новый тип животных.
